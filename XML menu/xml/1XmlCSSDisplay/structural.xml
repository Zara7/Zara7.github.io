<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/css" href="../1XmlCSSDisplay/content/structural.css"?>
<!DOCTYPE pattern>
<body>
<main xmlns:html="http://www.w3.org/1999/xhtml">
<rosie>
    <html:title>Structual patterns</html:title>
</rosie>
    <div>
    <table>
        <caption>Structural Patterns</caption>
        <tr>
            <heading>Name</heading>
            <heading>Description</heading>
            <heading>In Design Patterns</heading>
            <heading>In Code Complete</heading>
            <heading>Other</heading>
        </tr>
        <tr>
            <name>Adapter, Wrapper, or Translator</name>
            <description>Wrapper, or Translator	Convert the interface of a class into another interface clients expect. An adapter lets classes work together that could not otherwise because of incompatible interfaces. The enterprise integration pattern equivalent is the translator.</description>
            <yes>Yes</yes>
            <yes>Yes</yes>
            <other>N/A</other>
        </tr>
        <tr>
            <name>Bridge</name>
            <description>Decouple an abstraction from its implementation allowing the two to vary independently.</description>
            <yes>Yes</yes>
            <yes>Yes</yes>
            <other>N/A</other>
        </tr>
        <tr>
            <name>Composite</name>
            <description>Compose objects into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly.</description>
            <yes>Yes</yes>
            <yes>Yes</yes>
            <other>N/A</other>
        </tr>
        <tr>
            <name>Decorator</name>
            <description>Attach additional responsibilities to an object dynamically keeping the same interface. Decorators provide a flexible alternative to subclassing for extending functionality.</description>
            <yes>Yes</yes>
            <yes>Yes</yes>
            <other>N/A</other>
        </tr>
        <tr>
            <name>Extension object</name>
            <description>Adding functionality to a hierarchy without changing the hierarchy.</description>
            <no>No</no>
            <no>No</no>
            <text>Agile Software Development, Principles, Patterns, and Practices</text>
        </tr>
        <tr>
            <name>Facade</name>
            <description>Provide a unified interface to a set of interfaces in a subsystem. Facade defines a higher-level interface that makes the subsystem easier to use.</description>
            <yes>Yes</yes>
            <yes>Yes</yes>
            <other>N/A</other>
        </tr>
        <tr>
            <name>Flyweight</name>
            <description>Use sharing to support large numbers of similar objects efficiently.</description>
            <yes>Yes</yes>
            <no>No</no>
            <other>N/A</other>
        </tr>
        <tr>
            <name>Front controller</name>
            <description>The pattern relates to the design of Web applications. It provides a centralized entry point for handling requests.</description>
            <no>No</no>
            <no>No</no>
            <text>J2EE Patterns PoEAA</text>
        </tr>
        <tr>
            <name>Marker</name>
            <description>Empty interface to associate metadata with a class.</description>
            <no>No</no>
            <no>No</no>
            <text>Effective Java</text>
        </tr>
        <tr>
            <name>Module</name>
            <description>Group several related elements, such as classes, singletons, methods, globally used, into a single conceptual entity.</description>
            <no>No</no>
            <no>No</no>
            <other>N/A</other>
        </tr>
        <tr>
            <name>Proxy</name>
            <description>Provide a surrogate or placeholder for another object to control access to it.</description>
            <yes>Yes</yes>
            <no>No</no>
            <other>N/A</other>
        </tr>
        <tr>
            <name>Twin</name>
            <description>Twin allows modeling of multiple inheritance in programming languages that do not support this feature.</description>
            <yes>Yes</yes>
            <no>No</no>
            <other>N/A</other>
        </tr>
    </table>
    </div>
    </main>
</body>