<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/css" href="../2XmlCSSFlex/content/concurrency.css"?>
<!DOCTYPE pattern>
<body>
<main xmlns:html="http://www.w3.org/1999/xhtml">
<rosie>
    <html:title>Concurrency patterns</html:title>
</rosie>
    <div>
        <caption>Concurrency Patterns</caption>
    <table>
        <tr>
            <heading>Name</heading>
            <headingbig>Description</headingbig>
            <heading>In POSA2</heading>
            <heading>Other</heading>
        </tr>
        <tr>
            <name>Active Object</name>
            <description>Decouples method execution from method invocation that reside in their own thread of control. The goal is to introduce concurrency, by using asynchronous method invocation and a scheduler for handling requests.</description>
            <yes>Yes</yes>
            <other>N/A</other>
        </tr>
        <tr>
            <name>Balking</name>
            <description>Only execute an action on an object when the object is in a particular state.</description>
            <no>No</no>
            <other>N/A</other>
        </tr>
        <tr>
            <name>Binding properties</name>
            <description>Combining multiple observers to force properties in different objects to be synchronized or coordinated in some way.</description>
            <no>No</no>
            <other>N/A</other>
        </tr>
        <tr>
            <name>Blockchain</name>
            <description>Decentralized way to store data and agree on ways of processing it in a Merkle tree, optionally using digital signature for any individual contributions.</description>
            <no>No</no>
            <other>N/A</other>
        </tr>
        <tr>
            <name>Double-checked locking</name>
            <description>Reduce the overhead of acquiring a lock by first testing the locking criterion (the 'lock hint') in an unsafe manner; only if that succeeds does the actual locking logic proceed.
Can be unsafe when implemented in some language/hardware combinations. It can therefore sometimes be considered an anti-pattern.
            </description>
            <yes>Yes</yes>
            <other>N/A</other>
        </tr>
        <tr>
            <name>Event-based asynchronous</name>
            <description>Addresses problems with the asynchronous pattern that occur in multithreaded programs</description>
            <no>No</no>
            <other>N/A</other>
        </tr>
        <tr>
            <name>Guarded suspension</name>
            <description>Manages operations that require both a lock to be acquired and a precondition to be satisfied before the operation can be executed.</description>
            <no>No</no>
            <other>N/A</other>
        </tr>
        <tr>
            <name>Join</name>
            <description>Join-pattern provides a way to write concurrent, parallel and distributed programs by message passing. Compared to the use of threads and locks, this is a high-level programming model.</description>
            <no>No</no>
            <text>J2EE Patterns PoEAA</text>
        </tr>
        <tr>
            <name>Lock</name>
            <description>One thread puts a "lock" on a resource, preventing other threads from accessing or modifying it</description>
            <no>No</no>
            <text>Effective Java</text>
        </tr>
        <tr>
            <name>Module</name>
            <description>Group several related elements, such as classes, singletons, methods, globally used, into a single conceptual entity.</description>
            <no>No</no>
            <text>PoEAA</text>
        </tr>
        <tr>
            <name>Messaging design pattern (MDP)</name>
            <description>Allows the interchange of information (i.e. messages) between components and applications.</description>
            <no>No</no>
            <other>N/A</other>
        </tr>
        <tr>
            <name>Monitor object</name>
            <description>An object whose methods are subject to mutual exclusion, thus preventing multiple objects from erroneously trying to use it at the same time.</description>
            <yes>Yes</yes>
            <other>N/A</other>
        </tr>
        <tr>
            <name>Reactor</name>
            <description>A reactor object provides an asynchronous interface to resources that must be handled synchronously.</description>
            <yes>Yes</yes>
            <other>N/A</other>
        </tr>
         <tr>
            <name>Read-write lock</name>
            <description>Allows concurrent read access to an object, but requires exclusive access for write operations.</description>
            <no>No</no>
            <other>N/A</other>
        </tr>
         <tr>
            <name>Scheduler</name>
            <description>Explicitly control when threads may execute single-threaded code.</description>
            <no>No</no>
            <other>N/A</other>
        </tr>
         <tr>
            <name>Thread pool</name>
            <description>A number of threads are created to perform a number of tasks, which are usually organized in a queue. Typically, there are many more tasks than threads. Can be considered a special case of the object pool pattern.</description>
            <no>No</no>
            <other>N/A</other>
        </tr>
        <tr>
            <name>Thread-specific storage</name>
            <description>Static or "global" memory local to a thread.</description>
            <yes>Yes</yes>
            <other>N/A</other>
        </tr>
    </table>
    </div>
    </main>
</body>