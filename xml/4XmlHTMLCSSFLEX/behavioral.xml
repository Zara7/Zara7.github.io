<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/css" href="../4XmlHTMLCSSFLEX/content/behavioral.css"?>
<!DOCTYPE pattern>
<body>
<main xmlns:html="http://www.w3.org/1999/xhtml">
<rosie>
    <html:title>Behavioral patterns</html:title>
</rosie>
    <div>
        <caption>Behavioral Patterns</caption>
    <table>
        <tr>
            <heading1>Name</heading1>
            <heading2>Description</heading2>
            <heading3>In Design Patterns</heading3>
            <heading4>In Code Complete</heading4>
            <heading5>Other</heading5>
        </tr>
        <tr>
            <name><html:a href="https://en.wikipedia.org/wiki/Blackboard_(design_pattern)" target="blanck">Blackboard</html:a></name>
            <description><html:a href="https://en.wikipedia.org/wiki/Artificial_intelligence">Artificial intelligence</html:a> pattern for combining disparate sources of data (see <html:a href="https://en.wikipedia.org/wiki/Blackboard_system">blackboard system</html:a> )</description>
            <no>No</no>
            <no>No</no>
            <other>N/A</other>
        </tr>
        <tr>
            <name><html:a href="https://en.wikipedia.org/wiki/Chain-of-responsibility_pattern" target="blanck">Chain of responsibility</html:a></name>
            <description>Avoid coupling the sender of a request to its receiver by giving more than one object a chance to handle the request. Chain the receiving objects and pass the request along the chain until an object handles it.</description>
            <yes>Yes</yes>
            <no>No</no>
            <other>N/A</other>
        </tr>
        <tr>
            <name><html:a href="https://en.wikipedia.org/wiki/Command_pattern" target="blanck">Command</html:a></name>
            <description>Encapsulate a request as an object, thereby allowing for the parameterization of clients with different requests, and the queuing or logging of requests. It also allows for the support of undoable operations.</description>
            <yes>Yes</yes>
            <no>No</no>
            <other>N/A</other>
        </tr>
        <tr>
            <name><html:a href="https://en.wikipedia.org/wiki/Interpreter_pattern" target="blanck">Interpreter</html:a></name>
            <description>Given a language, define a representation for its grammar along with an interpreter that uses the representation to interpret sentences in the language.</description>
            <yes>Yes</yes>
            <no>No</no>
            <other>N/A</other>
        </tr>
        <tr>
            <name><html:a href="https://en.wikipedia.org/wiki/Iterator_pattern" target="blanck">Iterator</html:a></name>
            <description>Provide a way to access the elements of an <html:a href="https://en.wikipedia.org/wiki/Aggregate_pattern">aggregate</html:a> object sequentially without exposing its underlying representation.</description>
            <yes>Yes</yes>
            <yes>Yes</yes>
            <other>N/A</other>
        </tr>
        <tr>
            <name><html:a href="https://en.wikipedia.org/wiki/Mediator_pattern" target="blanck">Mediator</html:a></name>
            <description>Define an object that encapsulates how a set of objects interact. Mediator promotes <html:a href="https://en.wikipedia.org/wiki/Loose_coupling">loose coupling</html:a> by keeping objects from referring to each other explicitly, and it allows their interaction to vary independently.</description>
            <yes>Yes</yes>
            <yes>Yes</yes>
            <other>N/A</other>
        </tr>
        <tr>
            <name><html:a href="https://en.wikipedia.org/wiki/Memento_pattern" target="blanck">Memento</html:a></name>
            <description>Without violating encapsulation, capture and externalize an object's internal state allowing the object to be restored to this state later.</description>
            <no>No</no>
            <no>No</no>
            <other>N/A</other>
        </tr>
        <tr>
            <name><html:a href="https://en.wikipedia.org/wiki/Null_Object_pattern" target="blanck">Null object</html:a></name>
            <description>Avoid null references by providing a default object.</description>
            <no>No</no>
            <no>No</no>
            <other>N/A</other>
        </tr>
        <tr>
            <name><html:a href="https://en.wikipedia.org/wiki/Observer_pattern" target="blanck">Observer</html:a> or <html:p><html:a href="https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern">Publish/subscribe</html:a></html:p></name>
            <description>Define a one-to-many dependency between objects where a state change in one object results in all its dependents being notified and updated automatically.</description>
            <yes>Yes</yes>
            <yes>Yes</yes>
            <other>N/A</other>
        </tr>
        <tr>
            <name><html:a href="https://en.wikipedia.org/wiki/Servant_(design_pattern)" target="blanck">Servant</html:a></name>
            <description>Define common functionality for a group of classes.</description>
            <no>No</no>
            <no>No</no>
            <other>N/A</other>
        </tr>
        <tr>
            <name><html:a href="https://en.wikipedia.org/wiki/Specification_pattern" target="blanck">Specification</html:a></name>
            <description>Recombinable <html:a href="https://en.wikipedia.org/wiki/Business_logic">business logic </html:a> in a <html:a href="https://en.wikipedia.org/wiki/Boolean_algebra">Boolean </html:a>fashion.</description>
            <no>No</no>
            <no>No</no>
            <other>N/A</other>
        </tr>
        <tr>
            <name><html:a href="https://en.wikipedia.org/wiki/State_pattern" target="blanck">State</html:a></name>
            <description>Allow an object to alter its behavior when its internal state changes. The object will appear to change its class.</description>
            <yes>Yes</yes>
            <no>No</no>
            <other>N/A</other>
        </tr>
        <tr>
            <name><html:a href="https://en.wikipedia.org/wiki/Strategy_pattern" target="blanck">Strategy</html:a></name>
            <description>Define a family of algorithms, encapsulate each one, and make them interchangeable. Strategy lets the algorithm vary independently from clients that use it.</description>
            <yes>Yes</yes>
            <yes>Yes</yes>
            <other>N/A</other>
        </tr>
        <tr>
            <name><html:a href="https://en.wikipedia.org/wiki/Template_method_pattern" target="blanck">Template method</html:a></name>
            <description>Define the skeleton of an algorithm in an operation, deferring some steps to subclasses. Template method lets subclasses redefine certain steps of an algorithm without changing the algorithm's structure.</description>
            <yes>Yes</yes>
            <yes>Yes</yes>
            <other>N/A</other>
        </tr>
        <tr>
            <name><html:a href="https://en.wikipedia.org/wiki/Visitor_pattern" target="blanck">Visitor</html:a></name>
            <description>Represent an operation to be performed on the elements of an object structure. Visitor lets a new operation be defined without changing the classes of the elements on which it operates.</description>
            <yes>Yes</yes>
            <no>No</no>
            <other>N/A</other>
        </tr>
    </table>
    </div>
    </main>
</body>